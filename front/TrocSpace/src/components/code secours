<template>
  <LayoutSidebar>
    <div class="container mt-4">
      <div class="card shadow-lg">
        <div class="card-body">
          <h4 class="card-title">Liste des utilisateurs</h4>

          <!-- Vérifier si l'utilisateur est admin -->
          <div v-if="isLoading" class="spinner-border text-primary" role="status">
            <span class="sr-only">Chargement...</span>
          </div>

          <div v-else-if="errorMessage" class="alert alert-danger">
            {{ errorMessage }}
          </div>

          <div v-else-if="!isAdmin" class="alert alert-warning">
            Vous n'avez pas les droits nécessaires pour accéder à cette page.
          </div>

          <div v-else>
            <table class="table table-striped">
              <thead>
              <tr>
                <th scope="col">Nom</th>
                <th scope="col">Email</th>
                <th scope="col">Actions</th>
              </tr>
              </thead>
              <tbody>
              <tr v-for="user in users" :key="user.id">
                <td>{{ user.nom }} {{ user.prenom }}</td>
                <td>{{ user.email }}</td>
                <td>
                  <button
                      @click="toggleUserStatus(user.id)"
                      :class="['btn', user.enabled ? 'btn-warning' : 'btn-success', 'btn-sm']">
                    {{ user.enabled ? "Désactiver" : "Activer" }}
                  </button>
                  <button
                      @click="verifyUser(user.id)"
                      class="btn btn-success btn-sm ms-2"
                      :disabled="!isAdmin">
                    Vérifier
                  </button>
                  <button
                      @click="deleteUser(user.id)"
                      class="btn btn-danger btn-sm ms-2"
                      :disabled="!isAdmin">
                    Supprimer
                  </button>
                </td>
              </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </LayoutSidebar>
</template>

<script>
import axios from "axios";
import LayoutSidebar from "@/layouts/LayoutSidebar.vue";

export default {
  components: { LayoutSidebar },
  data() {
    return {
      users: [],
      isLoading: true,
      errorMessage: "",
      authToken: localStorage.getItem("auth_token"),
      userRole: null,  // Stocke le rôle de l'utilisateur
      isAdmin: false,  // Détermine si l'utilisateur est admin
    };
  },
  mounted() {
    if (!this.authToken) {
      window.location.href = "/login";
    } else {
      this.fetchUserRole(); // Récupérer le rôle au montage du composant
    }
  },
  methods: {
    async fetchUserRole() {
      this.isLoading = true;
      try {
        const url = "http://localhost:8080/api/user/me"; // URL de la requête
        console.log(`Requête API vers : ${url}`); // Afficher la route dans la console
        const response = await axios.get(url, {
          headers: {Authorization: `Bearer ${this.authToken}`},
        });
        this.userRole = response.data.role.name;
        this.isAdmin = this.userRole === "ADMIN"; // Si le rôle est ADMIN, l'utilisateur a accès à la page
        if (this.isAdmin) {
          this.fetchUsers(); // Si l'utilisateur est admin, charger les utilisateurs
        }
      } catch (error) {
        console.error("Erreur lors de la récupération du rôle utilisateur:", error.response ? error.response.data : error);
        this.errorMessage = "Erreur lors de la récupération des informations utilisateur.";
      } finally {
        this.isLoading = false;
      }
    },

    async fetchUsers() {
      const url = "http://localhost:8080/api/admin/users"; // URL de la requête pour récupérer les utilisateurs
      console.log(`Requête API vers : ${url}`); // Afficher la route dans la console
      try {
        const response = await axios.get(url, {
          headers: {Authorization: `Bearer ${this.authToken}`},
        });
        this.users = response.data;
      } catch (error) {
        console.error("Erreur lors de la récupération de la liste des utilisateurs:", error.response ? error.response.data : error);
        this.errorMessage = "Impossible de récupérer la liste des utilisateurs.";
      }
    },

    async toggleUserStatus(userId) {
      const url = `/admin/users/${userId}/toggle-status`; // URL de la requête
      console.log(`Requête API vers : ${url}`); // Afficher la route dans la console
      try {
        const response = await axios.put(url, null, {
          headers: {Authorization: `Bearer ${this.authToken}`},
        });
        alert(response.data);
        this.fetchUsers(); // Recharger les utilisateurs
      } catch (error) {
        console.error("Erreur lors de la modification de l'état de l'utilisateur:", error.response ? error.response.data : error);
        alert("Erreur lors de la modification de l'état de l'utilisateur.");
      }
    },

    async verifyUser(userId) {
      const url = `/admin/users/${userId}/verify`; // URL de la requête
      console.log(`Requête API vers : ${url}`); // Afficher la route dans la console
      try {
        const response = await axios.put(url, null, {
          headers: {Authorization: `Bearer ${this.authToken}`},
        });
        alert(response.data);
        this.fetchUsers(); // Recharger les utilisateurs
      } catch (error) {
        console.error("Erreur lors de la vérification de l'utilisateur:", error.response ? error.response.data : error);
        alert("Erreur lors de la vérification de l'utilisateur.");
      }
    },

    async deleteUser(userId) {
      const url = `/admin/users/${userId}`; // URL de la requête
      console.log(`Requête API vers : ${url}`); // Afficher la route dans la console
      try {
        const response = await axios.delete(url, {
          headers: {Authorization: `Bearer ${this.authToken}`},
        });
        alert(response.data);
        this.fetchUsers(); // Recharger les utilisateurs
      } catch (error) {
        console.error("Erreur lors de la suppression de l'utilisateur:", error.response ? error.response.data : error);
        alert("Erreur lors de la suppression de l'utilisateur.");
      }
    },
  },
};
</script>

<style scoped>
.card {
  border-radius: 15px;
}

.table th, .table td {
  vertical-align: middle;
}
</style>
